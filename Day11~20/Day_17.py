# https://projecteuler.net/problem=18

# 삼각형 모양의 배열에서 꼭대기부터 아래쪽으로 인접한 수를 찾아 내려가면서 합을 구할 때, 가장 큰 합을 가지는 경로를 찾고, 그 합을 구하는 문제이다.

# 1. 삼각형의 맨 아래부터 거슬러 올라가며 최대 합 계산:
# 2. 각 숫자 위치에서, 아래층의 두 인접 숫자 중 더 큰 숫자를 선택하여 현재 숫자와 더해준다.
# 3. 이 과정을 삼각형의 꼭대기까지 반복하면, 최종적으로 꼭대기 숫자에 최대 합이 나올 것이다.


triangle = [
    [75],
    [95, 64],
    [17, 47, 82],
    [18, 35, 87, 10],
    [20, 4, 82, 47, 65],
    [19, 1, 23, 75, 3, 34],
    [88, 2, 77, 73, 7, 63, 67],
    [99, 65, 4, 28, 6, 16, 70, 92],
    [41, 41, 26, 56, 83, 40, 80, 70, 33],
    [41, 48, 72, 33, 47, 32, 37, 16, 94, 29],
    [53, 71, 44, 65, 25, 43, 91, 52, 97, 51, 14],
    [70, 11, 33, 28, 77, 73, 17, 78, 39, 68, 17, 57],
    [91, 71, 52, 38, 17, 14, 91, 43, 58, 50, 27, 29, 48],
    [63, 66, 4, 68, 89, 53, 67, 30, 73, 16, 69, 87, 40, 31],
    [4, 62, 98, 27, 23, 9, 70, 98, 73, 93, 38, 53, 60, 4, 23]
]

# route = [75]

# for row in range(1,15):
#     previous_index = triangle[row - 1].index(route[row - 1])
#     next = max(triangle[row][previous_index], triangle[row][previous_index + 1])
#     route.append(next)

# print(route)
# print(sum(route))

# 삼각형의 맨 아래층부터 시작해서 거슬러 올라감
for row in range(len(triangle) - 2, -1, -1):
    for col in range(len(triangle[row])):
        # 현재 위치에 아래층 두 숫자 중 큰 값을 더함
        triangle[row][col] += max(triangle[row + 1][col], triangle[row + 1][col + 1])

# 최종적으로 삼각형의 꼭대기에 최대 합이 저장됨
max_sum = triangle[0][0]
print(max_sum)